#include <bits/stdc++.h>

#define MAX 501
#define X first
#define Y second
using namespace std;
int dx[4] = {-1,0,1,0};
int dy[4] = { 0,1,0,-1 };
int n, m;
int maP[MAX][MAX] = { 0, };

queue<pair<int,int>> q;
int BFS(pair<int, int> start) {
	q.push(start);
	int size = 1;
	maP[start.X][start.Y] = 0;
	while (!q.empty()) {
		pair<int, int> cur = q.front(); q.pop();
		for (int dir = 0;dir < 4;dir++)
		{
			int nx = cur.X + dx[dir];
			int ny = cur.Y + dy[dir];
			if (nx >= 0 && nx <= n && ny >= 0 && ny <= m && maP[nx][ny]==1 ) {
				
				maP[nx][ny] = 0;
				q.push({ nx,ny });
				size++;
			}
		}
	}
	return size;
}
int main(void) {

	ios::sync_with_stdio(0);
	cin.tie(0);
	cin >> n >> m;
	vector<int> s;
	for (int i = 0;i < n;i++)
		for (int j = 0;j < m;j++) {
			
			cin >> maP[i][j];
		}
	int areaMax = 0;
	for (int i = 0;i < n;i++)
		for (int j = 0;j < m;j++) {
			if (maP[i][j] >= 1) {
				int tmp = BFS({ i,j });
				s.push_back(tmp);
			}
		}

	sort(s.begin(), s.end());
	areaMax = (s.size() > 0) ? s[s.size() - 1] : 0;
	cout << s.size() << endl;
	cout<< areaMax << endl;
	return 0;
}