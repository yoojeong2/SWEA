#include <string>
#include <vector>
#include <queue>
#include <algorithm>
#include <iostream>

using namespace std;

#define X first 
#define Y second 

bool comp(tuple<string,int,int> a, tuple<string,int,int> b){
    return get<1>(a) < get<1>(b); // 시작 시간 낮은 순으로 정렬 
}
int ifHomeworkEnd(int start, int end){
    return start + end; // 시간 시간에 시작해서 종료예정시간(안멈추면)
}
int toTime(string timen){
    int hr = (timen[0]-'0') * 10 + (timen[1]-'0'); 
    int min = (timen[3]-'0') * 10 + (timen[4]-'0');
    return (hr * 60) + min ; // 현재 시간 분으로 표시 
}
int remainTime(tuple<string,int,int> cur, tuple<string,int,int> start,int time){
    
    return get<2>(cur) -(get<1>(start)- time); //현재꺼 소요 시간 - 시작시간 - time 
}
vector<string> solution(vector<vector<string>> plans) {
    vector<string> answer;
    deque<tuple<string,int,int>> list,wait;
    for(int i=0;i<plans.size();i++)
    {
        // 입력을 튜플로 저장함 (이름, 시작시간, 소요시간)
        list.push_back({plans[i][0],toTime(plans[i][1]),stoi(plans[i][2])});
    }
    // 튜플을 시작시간 작은 순으로 정렬함 
    sort(list.begin(),list.end(),comp);
    
    int sTime = get<1>(list.front()); //제일 처음 시작하는 과제의 시간 
    while(!list.empty() || !wait.empty())
    { //과제 목록이나 남은 과제 목록 빌때까지 수행함 
        tuple<string,int,int> current;
        if(!wait.empty() && (list.empty() || sTime < get<1>(list.front()))){
            //현재 대기 진행(리스트는아님) && (현재시간 < 다음공부 시작시간)
            current = wait.front();
            wait.pop_front(); //대기 목록 제일 앞꺼 꺼냄
        }
        else //대기 없거나 현재 시간이 과제 시작시간임
        {
            current = list.front();
            list.pop_front(); //리스트 목록에서 꺼냄 
            sTime = get<1>(current);
        }
        // 리스트가 안 비어있고, 현재 시작시간에서 현 과제 수행시 끝나는 시간이 리스트 목록 바로 뒤에 시작시간보다 큼 
        if(!(list.empty()) &&ifHomeworkEnd(sTime,get<2>(current)) > get<1>(list.front()))
           {
            // 과제 일부만 수행 
               get<2>(current) = remainTime(current,list.front(),sTime); // 현 과제 처리시 얼마나 처리 가능한지 계산 
               wait.push_front(current);  // 대기 목록에 현재꺼 우선으로 넣음 
               sTime = get<1>(list.front()); //현재 시간은 리스트 목록의 처음 시작 시간 
           }
           else
           {
               //현 과제 수행 가능 
               answer.push_back(get<0>(current));
               sTime = ifHomeworkEnd(sTime,get<2>(current)); //현재 과제 종료 시간 
           }
    }
        
      
    return answer;
}